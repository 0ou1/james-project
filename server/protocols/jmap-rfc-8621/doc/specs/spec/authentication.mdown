# Authentication

JMAP RFC-8620 deliberately does not address authentication concerns, and only assumes authenticated requests are handled.

Discovery of available authentication mechanism is not part of the JMAP specification.

This document summarizes available authentication mechanism on top of JMAP RFC-8621 implementation as part of the James
project.

## Basic authentication

James JMAP RFC-8621 supports [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication).

Please note that while convenient for testing purpose, this authentication mechanism should not be used for production
workflow: the credentials are transmitted again and over again, should be retained in memory, authentication is
challenged for each request...

## JWT authentication

We rely on a third party software to supply a signed JWT token, valid according to the James JWT public key.
If valid, the request is blindly trusted.

[Read more](https://github.com/apache/james-project/blob/master/docs/modules/servers/pages/distributed/configure/jmap.adoc#generating-a-jwt-key-pair).

## Implementing new authentication mechanisms

Administrator might need to adapt authentication to their needs.

To implement custom authentication mechanisms, you need to implement `org.apache.james.jmap.http.AuthenticationStrategy`
and register it in `RFC8621MethodsModule::provideAuthenticator`.

Note that the Apache James project would happily welcome contributions regarding support of other authentication flows.

## RFC-8887 and authentication for Web browser

James implements authentication via passing an `Authorization` token during the HTTP handshake.

However native browser implementations do not support passing additional headers (See
[this HTML WG discussion](https://github.com/whatwg/html/issues/3062) which even mention JMAP).

As such, we define an extension to upgrade unauthenticated webSocket connection into connected one.

We define the additional message for carrying Authorization:

```
{
  "@type": "Authorization",
  "Authorization": "Basic Ym9iQGRvbWFpbi50bGQ6Ym9icGFzc3dvcmQ="
}
```

`Authorization` message can only be sent on not yet authenticated webSocket channel.

An `Authorization` message must be sent on not yet authenticated webSocket before any other message.

Violation of these constraints leads to connection closure.

The value carried in the `Authorization` property will be validated as if it was specified via the `Authorization` header.
Failure doing so leads to connection closure.